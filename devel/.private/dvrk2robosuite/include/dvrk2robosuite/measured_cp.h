// Generated by gencpp from file dvrk2robosuite/measured_cp.msg
// DO NOT EDIT!


#ifndef DVRK2ROBOSUITE_MESSAGE_MEASURED_CP_H
#define DVRK2ROBOSUITE_MESSAGE_MEASURED_CP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dvrk2robosuite
{
template <class ContainerAllocator>
struct measured_cp_
{
  typedef measured_cp_<ContainerAllocator> Type;

  measured_cp_()
    : a(0.0)
    , b(0.0)
    , c(0.0)
    , d(0.0)
    , e(0.0)
    , f(0.0)
    , g(0.0)
    , gripper(0.0)  {
    }
  measured_cp_(const ContainerAllocator& _alloc)
    : a(0.0)
    , b(0.0)
    , c(0.0)
    , d(0.0)
    , e(0.0)
    , f(0.0)
    , g(0.0)
    , gripper(0.0)  {
  (void)_alloc;
    }



   typedef double _a_type;
  _a_type a;

   typedef double _b_type;
  _b_type b;

   typedef double _c_type;
  _c_type c;

   typedef double _d_type;
  _d_type d;

   typedef double _e_type;
  _e_type e;

   typedef double _f_type;
  _f_type f;

   typedef double _g_type;
  _g_type g;

   typedef double _gripper_type;
  _gripper_type gripper;





  typedef boost::shared_ptr< ::dvrk2robosuite::measured_cp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dvrk2robosuite::measured_cp_<ContainerAllocator> const> ConstPtr;

}; // struct measured_cp_

typedef ::dvrk2robosuite::measured_cp_<std::allocator<void> > measured_cp;

typedef boost::shared_ptr< ::dvrk2robosuite::measured_cp > measured_cpPtr;
typedef boost::shared_ptr< ::dvrk2robosuite::measured_cp const> measured_cpConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dvrk2robosuite::measured_cp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dvrk2robosuite::measured_cp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dvrk2robosuite::measured_cp_<ContainerAllocator1> & lhs, const ::dvrk2robosuite::measured_cp_<ContainerAllocator2> & rhs)
{
  return lhs.a == rhs.a &&
    lhs.b == rhs.b &&
    lhs.c == rhs.c &&
    lhs.d == rhs.d &&
    lhs.e == rhs.e &&
    lhs.f == rhs.f &&
    lhs.g == rhs.g &&
    lhs.gripper == rhs.gripper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dvrk2robosuite::measured_cp_<ContainerAllocator1> & lhs, const ::dvrk2robosuite::measured_cp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dvrk2robosuite

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dvrk2robosuite::measured_cp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dvrk2robosuite::measured_cp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dvrk2robosuite::measured_cp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dvrk2robosuite::measured_cp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dvrk2robosuite::measured_cp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dvrk2robosuite::measured_cp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dvrk2robosuite::measured_cp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "175a49f06988368beca4d79073ba2f80";
  }

  static const char* value(const ::dvrk2robosuite::measured_cp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x175a49f06988368bULL;
  static const uint64_t static_value2 = 0xeca4d79073ba2f80ULL;
};

template<class ContainerAllocator>
struct DataType< ::dvrk2robosuite::measured_cp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dvrk2robosuite/measured_cp";
  }

  static const char* value(const ::dvrk2robosuite::measured_cp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dvrk2robosuite::measured_cp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 a\n"
"float64 b\n"
"float64 c\n"
"float64 d\n"
"float64 e\n"
"float64 f\n"
"float64 g\n"
"float64 gripper\n"
;
  }

  static const char* value(const ::dvrk2robosuite::measured_cp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dvrk2robosuite::measured_cp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.c);
      stream.next(m.d);
      stream.next(m.e);
      stream.next(m.f);
      stream.next(m.g);
      stream.next(m.gripper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct measured_cp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dvrk2robosuite::measured_cp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dvrk2robosuite::measured_cp_<ContainerAllocator>& v)
  {
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<double>::stream(s, indent + "  ", v.b);
    s << indent << "c: ";
    Printer<double>::stream(s, indent + "  ", v.c);
    s << indent << "d: ";
    Printer<double>::stream(s, indent + "  ", v.d);
    s << indent << "e: ";
    Printer<double>::stream(s, indent + "  ", v.e);
    s << indent << "f: ";
    Printer<double>::stream(s, indent + "  ", v.f);
    s << indent << "g: ";
    Printer<double>::stream(s, indent + "  ", v.g);
    s << indent << "gripper: ";
    Printer<double>::stream(s, indent + "  ", v.gripper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DVRK2ROBOSUITE_MESSAGE_MEASURED_CP_H
